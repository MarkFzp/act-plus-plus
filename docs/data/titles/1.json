{
    "/utils.py": "Episodic Dataset Processing & Augmentation",
    "/utils.py:1-33": "Episodic Dataset Augmenter",
    "/utils.py:100-121": "Image Stacking and Preprocessing",
    "/utils.py:122-145": "Image Data Preprocessing and Error Handling",
    "/utils.py:146-171": "Get Normalized Stats from Dataset Paths",
    "/utils.py:172-196": "Normalizing Data for Machine Learning Training",
    "/utils.py:198-218": "HDF5 Search and Batch Sampler Functions",
    "/utils.py:220-233": "Load and Split Data Function",
    "/utils.py:234-247": "Generate and Print Train/Validation Episode Details",
    "/utils.py:248-264": "Episodic Dataset Initialization",
    "/utils.py:265-284": "Augmented Worker Datasets",
    "/utils.py:285-324": "Base Action Preprocessing and Pose Sampling",
    "/utils.py:325-360": "Calculate Mean, Detach Values, Set Seed Utilities",
    "/utils.py:34-58": "Transformation Initialization and Location Function",
    "/utils.py:59-77": "Base Action Concatenation and Data Storage",
    "/utils.py:78-99": "Video Preprocessing for Agent in Simulation",
    "/vinn_cache_feature.py": "Cache Feature Extraction",
    "/vinn_cache_feature.py:1-44": "VINN Feature Extraction Code",
    "/vinn_cache_feature.py:118-142": "Saving Features to HDF5 File",
    "/vinn_cache_feature.py:143-148": "Setting up Argument Parser",
    "/vinn_cache_feature.py:45-72": "Load and Organize Data for Feature Extractors",
    "/vinn_cache_feature.py:73-93": "Initialize and Preprocess ResNet18 Model for Inference",
    "/vinn_cache_feature.py:94-117": "Feature Extraction and Storage from Images",
    "/vinn_eval.py": "Vinn Evaluation Script",
    "/vinn_eval.py:1-35": "Nearest Neighbor Calculator",
    "/vinn_eval.py:102-130": "Train Data Loading: Visual Feature Concatenation",
    "/vinn_eval.py:132-154": "Stacking Actions and Formatting Torch Tensors",
    "/vinn_eval.py:155-185": "Rollout Performance Tracking Algorithm",
    "/vinn_eval.py:186-209": "Evaluation Loop and Data Collection",
    "/vinn_eval.py:210-229": "Robotics Image Processing",
    "/vinn_eval.py:230-250": "Nearest Neighbor Action Selection",
    "/vinn_eval.py:252-275": "Robot Joint Control and Safety Ensuring",
    "/vinn_eval.py:276-294": "Gripper Mode Setting and Performance Evaluation",
    "/vinn_eval.py:295-322": "Episode Analysis: Success Rate, Average Return",
    "/vinn_eval.py:323-336": "Expand Greyscale Image Classification Script",
    "/vinn_eval.py:37-63": "Weighted Pairwise Distance Prediction",
    "/vinn_eval.py:64-101": "Task-Specific Parameter Setting and Configuration",
    "/vinn_select_k.py": "Selecting Optimal K with Nearest Neighbors",
    "/vinn_select_k.py:1-31": "Selecting K-Nearest Neighbors with Softmax Weights",
    "/vinn_select_k.py:119-134": "Optimal 'k' Selection with Python Code",
    "/vinn_select_k.py:32-66": "Episode Index Validator",
    "/vinn_select_k.py:67-94": "Concatenate HDF5 Data for Training",
    "/vinn_select_k.py:95-118": "Prepare HDF5 Data for Training in PyTorch",
    "/visualize_episodes.py": "Timestamp Plot Generator",
    "/visualize_episodes.py:1-35": "Robotics Data Loading and Processing",
    "/visualize_episodes.py:124-154": "Timestamp Visualization for Camera Frames",
    "/visualize_episodes.py:36-60": "Mirrored HDF5 Data Visualization",
    "/visualize_episodes.py:61-87": "Video Concatenator and Joint Visualizer",
    "/visualize_episodes.py:88-123": "Visualize Joint States and Arm Commands"
}