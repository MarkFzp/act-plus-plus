{
    "summary": "This code defines task parameters and simulation environments for robotics applications, including gripper position limits, joint names, and normalization functions for master and puppet grippers.",
    "details": [
        {
            "comment": "This code defines constant values for task parameters. It specifies different simulation tasks, their associated dataset directories, the number of episodes, episode length, and camera names. These constants are used for organizing and accessing datasets in the 'DATA_DIR' directory.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/constants.py\":0-34",
            "content": "import pathlib\nimport os\n### Task parameters\nDATA_DIR = '/home/zfu/interbotix_ws/src/act/data' if os.getlogin() == 'zfu' else '/scr/tonyzhao/datasets'\nSIM_TASK_CONFIGS = {\n    'sim_transfer_cube_scripted':{\n        'dataset_dir': DATA_DIR + '/sim_transfer_cube_scripted',\n        'num_episodes': 50,\n        'episode_len': 400,\n        'camera_names': ['top', 'left_wrist', 'right_wrist']\n    },\n    'sim_transfer_cube_human':{\n        'dataset_dir': DATA_DIR + '/sim_transfer_cube_human',\n        'num_episodes': 50,\n        'episode_len': 400,\n        'camera_names': ['top']\n    },\n    'sim_insertion_scripted': {\n        'dataset_dir': DATA_DIR + '/sim_insertion_scripted',\n        'num_episodes': 50,\n        'episode_len': 400,\n        'camera_names': ['top', 'left_wrist', 'right_wrist']\n    },\n    'sim_insertion_human': {\n        'dataset_dir': DATA_DIR + '/sim_insertion_human',\n        'num_episodes': 50,\n        'episode_len': 500,\n        'camera_names': ['top']\n    },\n    'all': {\n        'dataset_dir': DATA_DIR + '/',"
        },
        {
            "comment": "This code defines a dictionary containing constant values for simulation environments. It includes dataset directories, episode parameters, and camera names for each environment. Additionally, there are constants defining the time step (DT), frame rate (FPS), joint names, initial arm pose, and finger position limits for the simulation. These constants will be used in the simulation processes to ensure consistency across different environments and tasks.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/constants.py\":35-65",
            "content": "        'num_episodes': None,\n        'episode_len': None,\n        'name_filter': lambda n: 'sim' not in n,\n        'camera_names': ['cam_high', 'cam_left_wrist', 'cam_right_wrist']\n    },\n    'sim_transfer_cube_scripted_mirror':{\n        'dataset_dir': DATA_DIR + '/sim_transfer_cube_scripted_mirror',\n        'num_episodes': None,\n        'episode_len': 400,\n        'camera_names': ['top', 'left_wrist', 'right_wrist']\n    },\n    'sim_insertion_scripted_mirror': {\n        'dataset_dir': DATA_DIR + '/sim_insertion_scripted_mirror',\n        'num_episodes': None,\n        'episode_len': 400,\n        'camera_names': ['top', 'left_wrist', 'right_wrist']\n    },\n}\n### Simulation envs fixed constants\nDT = 0.02\nFPS = 50\nJOINT_NAMES = [\"waist\", \"shoulder\", \"elbow\", \"forearm_roll\", \"wrist_angle\", \"wrist_rotate\"]\nSTART_ARM_POSE = [0, -0.96, 1.16, 0, -0.3, 0, 0.02239, -0.02239,  0, -0.96, 1.16, 0, -0.3, 0, 0.02239, -0.02239]\nXML_DIR = str(pathlib.Path(__file__).parent.resolve()) + '/assets/' # note: absolute path\n# Left finger position limits (qpos[7]), right_finger = -1 * left_finger"
        },
        {
            "comment": "This code defines gripper position and joint limits for the master and puppet grippers. It also includes normalization and unnormalization functions to convert gripper positions between normalized and actual values. The purpose is likely to enable consistent handling of gripper positions regardless of their current state.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/constants.py\":66-83",
            "content": "MASTER_GRIPPER_POSITION_OPEN = 0.02417\nMASTER_GRIPPER_POSITION_CLOSE = 0.01244\nPUPPET_GRIPPER_POSITION_OPEN = 0.05800\nPUPPET_GRIPPER_POSITION_CLOSE = 0.01844\n# Gripper joint limits (qpos[6])\nMASTER_GRIPPER_JOINT_OPEN = -0.8\nMASTER_GRIPPER_JOINT_CLOSE = -1.65\nPUPPET_GRIPPER_JOINT_OPEN = 1.4910\nPUPPET_GRIPPER_JOINT_CLOSE = -0.6213\n############################ Helper functions ############################\nMASTER_GRIPPER_POSITION_NORMALIZE_FN = lambda x: (x - MASTER_GRIPPER_POSITION_CLOSE) / (MASTER_GRIPPER_POSITION_OPEN - MASTER_GRIPPER_POSITION_CLOSE)\nPUPPET_GRIPPER_POSITION_NORMALIZE_FN = lambda x: (x - PUPPET_GRIPPER_POSITION_CLOSE) / (PUPPET_GRIPPER_POSITION_OPEN - PUPPET_GRIPPER_POSITION_CLOSE)\nMASTER_GRIPPER_POSITION_UNNORMALIZE_FN = lambda x: x * (MASTER_GRIPPER_POSITION_OPEN - MASTER_GRIPPER_POSITION_CLOSE) + MASTER_GRIPPER_POSITION_CLOSE\nPUPPET_GRIPPER_POSITION_UNNORMALIZE_FN = lambda x: x * (PUPPET_GRIPPER_POSITION_OPEN - PUPPET_GRIPPER_POSITION_CLOSE) + PUPPET_GRIPPER_POSITION_CLOSE\nMASTER2P"
        },
        {
            "comment": "This code defines various lambda functions for joint normalization and unnormalization, gripper velocity normalization, as well as a master-to-puppet joint conversion function. These functions are likely used in robotics or similar applications to manipulate and convert gripper positions and velocities between two systems with different open and closed positions.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/constants.py\":83-94",
            "content": "UPPET_POSITION_FN = lambda x: PUPPET_GRIPPER_POSITION_UNNORMALIZE_FN(MASTER_GRIPPER_POSITION_NORMALIZE_FN(x))\nMASTER_GRIPPER_JOINT_NORMALIZE_FN = lambda x: (x - MASTER_GRIPPER_JOINT_CLOSE) / (MASTER_GRIPPER_JOINT_OPEN - MASTER_GRIPPER_JOINT_CLOSE)\nPUPPET_GRIPPER_JOINT_NORMALIZE_FN = lambda x: (x - PUPPET_GRIPPER_JOINT_CLOSE) / (PUPPET_GRIPPER_JOINT_OPEN - PUPPET_GRIPPER_JOINT_CLOSE)\nMASTER_GRIPPER_JOINT_UNNORMALIZE_FN = lambda x: x * (MASTER_GRIPPER_JOINT_OPEN - MASTER_GRIPPER_JOINT_CLOSE) + MASTER_GRIPPER_JOINT_CLOSE\nPUPPET_GRIPPER_JOINT_UNNORMALIZE_FN = lambda x: x * (PUPPET_GRIPPER_JOINT_OPEN - PUPPET_GRIPPER_JOINT_CLOSE) + PUPPET_GRIPPER_JOINT_CLOSE\nMASTER2PUPPET_JOINT_FN = lambda x: PUPPET_GRIPPER_JOINT_UNNORMALIZE_FN(MASTER_GRIPPER_JOINT_NORMALIZE_FN(x))\nMASTER_GRIPPER_VELOCITY_NORMALIZE_FN = lambda x: x / (MASTER_GRIPPER_POSITION_OPEN - MASTER_GRIPPER_POSITION_CLOSE)\nPUPPET_GRIPPER_VELOCITY_NORMALIZE_FN = lambda x: x / (PUPPET_GRIPPER_POSITION_OPEN - PUPPET_GRIPPER_POSITION_CLOSE)\nMASTE"
        },
        {
            "comment": "This code defines four lambda functions, two each for the master and puppet grippers. The functions convert gripper positions to joint angles (pos2joint) and vice versa (joint2pos). It also calculates the midpoint of the master gripper's joint range. These functions use normalize and unnormalize FN from respective constants.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/constants.py\":94-99",
            "content": "R_POS2JOINT = lambda x: MASTER_GRIPPER_POSITION_NORMALIZE_FN(x) * (MASTER_GRIPPER_JOINT_OPEN - MASTER_GRIPPER_JOINT_CLOSE) + MASTER_GRIPPER_JOINT_CLOSE\nMASTER_JOINT2POS = lambda x: MASTER_GRIPPER_POSITION_UNNORMALIZE_FN((x - MASTER_GRIPPER_JOINT_CLOSE) / (MASTER_GRIPPER_JOINT_OPEN - MASTER_GRIPPER_JOINT_CLOSE))\nPUPPET_POS2JOINT = lambda x: PUPPET_GRIPPER_POSITION_NORMALIZE_FN(x) * (PUPPET_GRIPPER_JOINT_OPEN - PUPPET_GRIPPER_JOINT_CLOSE) + PUPPET_GRIPPER_JOINT_CLOSE\nPUPPET_JOINT2POS = lambda x: PUPPET_GRIPPER_POSITION_UNNORMALIZE_FN((x - PUPPET_GRIPPER_JOINT_CLOSE) / (PUPPET_GRIPPER_JOINT_OPEN - PUPPET_GRIPPER_JOINT_CLOSE))\nMASTER_GRIPPER_JOINT_MID = (MASTER_GRIPPER_JOINT_OPEN + MASTER_GRIPPER_JOINT_CLOSE)/2"
        }
    ]
}