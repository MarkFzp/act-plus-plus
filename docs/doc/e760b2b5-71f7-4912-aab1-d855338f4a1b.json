{
    "summary": "This code imports libraries, defines functions for loading data from HDF5 files and generates a timestamp plot for camera frames using timestamps, converting them to float values, calculating time differences, and saving the resulting plot.",
    "details": [
        {
            "comment": "This code imports necessary libraries, defines a list of joint names and state names, and contains two functions. The `load_hdf5` function loads dataset from hdf5 file, retrieves qpos, qvel, action, and image data. It returns these values. The `main` function takes arguments for dataset directory and episode index, but does not contain any code within it. The joint names likely represent different body parts' movement data in a robotics or simulation context.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/visualize_episodes.py\":0-34",
            "content": "import os\nimport numpy as np\nimport cv2\nimport h5py\nimport argparse\nimport matplotlib.pyplot as plt\nfrom constants import DT\nimport IPython\ne = IPython.embed\nJOINT_NAMES = [\"waist\", \"shoulder\", \"elbow\", \"forearm_roll\", \"wrist_angle\", \"wrist_rotate\"]\nSTATE_NAMES = JOINT_NAMES + [\"gripper\"]\ndef load_hdf5(dataset_dir, dataset_name):\n    dataset_path = os.path.join(dataset_dir, dataset_name + '.hdf5')\n    if not os.path.isfile(dataset_path):\n        print(f'Dataset does not exist at \\n{dataset_path}\\n')\n        exit()\n    with h5py.File(dataset_path, 'r') as root:\n        is_sim = root.attrs['sim']\n        qpos = root['/observations/qpos'][()]\n        qvel = root['/observations/qvel'][()]\n        action = root['/action'][()]\n        image_dict = dict()\n        for cam_name in root[f'/observations/images/'].keys():\n            image_dict[cam_name] = root[f'/observations/images/{cam_name}'][()]\n    return qpos, qvel, action, image_dict\ndef main(args):\n    dataset_dir = args['dataset_dir']\n    episode_idx = args['episode_idx']"
        },
        {
            "comment": "The code loads data from an HDF5 file based on a boolean mirror flag, then saves the images as videos and visualizes joint positions. The video saving function takes in a list of images and writes them to a file with a specified fourcc code and framerate.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/visualize_episodes.py\":35-59",
            "content": "    ismirror = args['ismirror']\n    if ismirror:\n        dataset_name = f'mirror_episode_{episode_idx}'\n    else:\n        dataset_name = f'episode_{episode_idx}'\n    qpos, qvel, action, image_dict = load_hdf5(dataset_dir, dataset_name)\n    save_videos(image_dict, DT, video_path=os.path.join(dataset_dir, dataset_name + '_video.mp4'))\n    visualize_joints(qpos, action, plot_path=os.path.join(dataset_dir, dataset_name + '_qpos.png'))\n    # visualize_timestamp(t_list, dataset_path) # TODO addn timestamp back\ndef save_videos(video, dt, video_path=None):\n    if isinstance(video, list):\n        cam_names = list(video[0].keys())\n        cam_names = sorted(cam_names)\n        h, w, _ = video[0][cam_names[0]].shape\n        w = w * len(cam_names)\n        fps = int(1/dt)\n        out = cv2.VideoWriter(video_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n        for ts, image_dict in enumerate(video):\n            images = []\n            for cam_name in cam_names:\n                image = image_dict[cam_name]\n                image = image[:, :, [2, 1, 0]] # swap B and R channel"
        },
        {
            "comment": "Code snippet handles saving a video by either concatenating images or concatenating multiple videos horizontally, then writing to a file. It also has functionality for visualizing joint positions over time and plots them if necessary with optional custom labels.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/visualize_episodes.py\":60-86",
            "content": "                images.append(image)\n            images = np.concatenate(images, axis=1)\n            out.write(images)\n        out.release()\n        print(f'Saved video to: {video_path}')\n    elif isinstance(video, dict):\n        cam_names = list(video.keys())\n        cam_names = sorted(cam_names)\n        all_cam_videos = []\n        for cam_name in cam_names:\n            all_cam_videos.append(video[cam_name])\n        all_cam_videos = np.concatenate(all_cam_videos, axis=2) # width dimension\n        n_frames, h, w, _ = all_cam_videos.shape\n        fps = int(1 / dt)\n        out = cv2.VideoWriter(video_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n        for t in range(n_frames):\n            image = all_cam_videos[t]\n            image = image[:, :, [2, 1, 0]]  # swap B and R channel\n            out.write(image)\n        out.release()\n        print(f'Saved video to: {video_path}')\ndef visualize_joints(qpos_list, command_list, plot_path=None, ylim=None, label_overwrite=None):\n    if label_overwrite:\n        label1, label2 = label_overwrite"
        },
        {
            "comment": "This code visualizes the joint state and arm command over time for a given set of timestamps. It first converts the provided data into numpy arrays and creates subplots for each dimension. Then, it plots the joint state and arm command values against timestamps for each dimension. Optionally, it sets the y-axis limits. Finally, it saves the resulting plot as an image and prints its location.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/visualize_episodes.py\":87-122",
            "content": "    else:\n        label1, label2 = 'State', 'Command'\n    qpos = np.array(qpos_list) # ts, dim\n    command = np.array(command_list)\n    num_ts, num_dim = qpos.shape\n    h, w = 2, num_dim\n    num_figs = num_dim\n    fig, axs = plt.subplots(num_figs, 1, figsize=(w, h * num_figs))\n    # plot joint state\n    all_names = [name + '_left' for name in STATE_NAMES] + [name + '_right' for name in STATE_NAMES]\n    for dim_idx in range(num_dim):\n        ax = axs[dim_idx]\n        ax.plot(qpos[:, dim_idx], label=label1)\n        ax.set_title(f'Joint {dim_idx}: {all_names[dim_idx]}')\n        ax.legend()\n    # plot arm command\n    for dim_idx in range(num_dim):\n        ax = axs[dim_idx]\n        ax.plot(command[:, dim_idx], label=label2)\n        ax.legend()\n    if ylim:\n        for dim_idx in range(num_dim):\n            ax = axs[dim_idx]\n            ax.set_ylim(ylim)\n    plt.tight_layout()\n    plt.savefig(plot_path)\n    print(f'Saved qpos plot to: {plot_path}')\n    plt.close()\ndef visualize_timestamp(t_list, dataset_path):\n    plot_path = dataset_path.replace('.pkl', '_timestamp.png')"
        },
        {
            "comment": "This code generates a timestamp plot for camera frames from a given dataset. It reads the timestamps, converts them to float values, plots them against timesteps, and calculates the time difference between consecutive timestamps. The resulting plot is saved and the file path is printed. The code expects the dataset directory, episode index, and a flag for mirror augmentation as input arguments.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/visualize_episodes.py\":123-153",
            "content": "    h, w = 4, 10\n    fig, axs = plt.subplots(2, 1, figsize=(w, h*2))\n    # process t_list\n    t_float = []\n    for secs, nsecs in t_list:\n        t_float.append(secs + nsecs * 10E-10)\n    t_float = np.array(t_float)\n    ax = axs[0]\n    ax.plot(np.arange(len(t_float)), t_float)\n    ax.set_title(f'Camera frame timestamps')\n    ax.set_xlabel('timestep')\n    ax.set_ylabel('time (sec)')\n    ax = axs[1]\n    ax.plot(np.arange(len(t_float)-1), t_float[:-1] - t_float[1:])\n    ax.set_title(f'dt')\n    ax.set_xlabel('timestep')\n    ax.set_ylabel('time (sec)')\n    plt.tight_layout()\n    plt.savefig(plot_path)\n    print(f'Saved timestamp plot to: {plot_path}')\n    plt.close()\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--dataset_dir', action='store', type=str, help='Dataset dir.', required=True)\n    parser.add_argument('--episode_idx', action='store', type=int, help='Episode index.', required=False)\n    parser.add_argument('--ismirror', action='store_true')\n    main(vars(parser.parse_args()))"
        }
    ]
}