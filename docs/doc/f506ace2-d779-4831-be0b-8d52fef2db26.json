{
    "summary": "The code defines a Backbone class for ResNet backbones with frozen BatchNorm layers and builds a vision transformer backbone model using position embedding.",
    "details": [
        {
            "comment": "This code snippet defines a class called \"FrozenBatchNorm2d\" which extends torch.nn.Module and fixes the batch statistics and affine parameters in BatchNorm2d. It also initializes buffers for weight, bias, running_mean, and running_var with appropriate values. The purpose is to avoid the BatchNorm2d parameters from updating during training, enabling it to function as a frozen layer.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/detr/models/backbone.py\":0-34",
            "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\n\"\"\"\nBackbone modules.\n\"\"\"\nfrom collections import OrderedDict\nimport torch\nimport torch.nn.functional as F\nimport torchvision\nfrom torch import nn\nfrom torchvision.models._utils import IntermediateLayerGetter\nfrom typing import Dict, List\nfrom util.misc import NestedTensor, is_main_process\nfrom .position_encoding import build_position_encoding\nimport IPython\ne = IPython.embed\nclass FrozenBatchNorm2d(torch.nn.Module):\n    \"\"\"\n    BatchNorm2d where the batch statistics and the affine parameters are fixed.\n    Copy-paste from torchvision.misc.ops with added eps before rqsrt,\n    without which any other policy_models than torchvision.policy_models.resnet[18,34,50,101]\n    produce nans.\n    \"\"\"\n    def __init__(self, n):\n        super(FrozenBatchNorm2d, self).__init__()\n        self.register_buffer(\"weight\", torch.ones(n))\n        self.register_buffer(\"bias\", torch.zeros(n))\n        self.register_buffer(\"running_mean\", torch.zeros(n))\n        self.register_buffer(\"running_var\", torch.ones(n))"
        },
        {
            "comment": "Function \"_load_from_state_dict\" deletes \"num_batches_tracked_key\" from state_dict, then calls parent class's version of _load_from_state_dict. Function \"forward\" reshapes weights and biases for efficient processing, calculates scale and bias, and returns the processed input. Class \"BackboneBase\" initializes with backbone, train_backbone, num_channels, and return_interm_layers parameters.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/detr/models/backbone.py\":36-61",
            "content": "    def _load_from_state_dict(self, state_dict, prefix, local_metadata, strict,\n                              missing_keys, unexpected_keys, error_msgs):\n        num_batches_tracked_key = prefix + 'num_batches_tracked'\n        if num_batches_tracked_key in state_dict:\n            del state_dict[num_batches_tracked_key]\n        super(FrozenBatchNorm2d, self)._load_from_state_dict(\n            state_dict, prefix, local_metadata, strict,\n            missing_keys, unexpected_keys, error_msgs)\n    def forward(self, x):\n        # move reshapes to the beginning\n        # to make it fuser-friendly\n        w = self.weight.reshape(1, -1, 1, 1)\n        b = self.bias.reshape(1, -1, 1, 1)\n        rv = self.running_var.reshape(1, -1, 1, 1)\n        rm = self.running_mean.reshape(1, -1, 1, 1)\n        eps = 1e-5\n        scale = w * (rv + eps).rsqrt()\n        bias = b - rm * scale\n        return x * scale + bias\nclass BackboneBase(nn.Module):\n    def __init__(self, backbone: nn.Module, train_backbone: bool, num_channels: int, return_interm_layers: bool):"
        },
        {
            "comment": "This code defines a Backbone class in Python, which is part of a larger codebase. The class extends the BackboneBase and includes an init method to initialize the object, and a forward method for processing input data through the backbone model. It also handles nested tensors and returns them in a dictionary format.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/detr/models/backbone.py\":62-85",
            "content": "        super().__init__()\n        # for name, parameter in backbone.named_parameters(): # only train later layers # TODO do we want this?\n        #     if not train_backbone or 'layer2' not in name and 'layer3' not in name and 'layer4' not in name:\n        #         parameter.requires_grad_(False)\n        if return_interm_layers:\n            return_layers = {\"layer1\": \"0\", \"layer2\": \"1\", \"layer3\": \"2\", \"layer4\": \"3\"}\n        else:\n            return_layers = {'layer4': \"0\"}\n        self.body = IntermediateLayerGetter(backbone, return_layers=return_layers)\n        self.num_channels = num_channels\n    def forward(self, tensor):\n        xs = self.body(tensor)\n        return xs\n        # out: Dict[str, NestedTensor] = {}\n        # for name, x in xs.items():\n        #     m = tensor_list.mask\n        #     assert m is not None\n        #     mask = F.interpolate(m[None].float(), size=x.shape[-2:]).to(torch.bool)[0]\n        #     out[name] = NestedTensor(x, mask)\n        # return out\nclass Backbone(BackboneBase):"
        },
        {
            "comment": "The code defines a ResNet backbone model with frozen BatchNorm for transfer learning tasks. It includes an option to freeze the BatchNorm layers and a Joiner class that combines the output of the backbone and position encoding for further processing in a list format.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/detr/models/backbone.py\":86-111",
            "content": "    \"\"\"ResNet backbone with frozen BatchNorm.\"\"\"\n    def __init__(self, name: str,\n                 train_backbone: bool,\n                 return_interm_layers: bool,\n                 dilation: bool):\n        backbone = getattr(torchvision.models, name)(\n            replace_stride_with_dilation=[False, False, dilation],\n            pretrained=is_main_process(), norm_layer=FrozenBatchNorm2d) # pretrained # TODO do we want frozen batch_norm??\n        num_channels = 512 if name in ('resnet18', 'resnet34') else 2048\n        super().__init__(backbone, train_backbone, num_channels, return_interm_layers)\nclass Joiner(nn.Sequential):\n    def __init__(self, backbone, position_embedding):\n        super().__init__(backbone, position_embedding)\n    def forward(self, tensor_list: NestedTensor):\n        xs = self[0](tensor_list)\n        out: List[NestedTensor] = []\n        pos = []\n        for name, x in xs.items():\n            out.append(x)\n            # position encoding\n            pos.append(self[1](x).to(x.dtype))\n        return out, pos"
        },
        {
            "comment": "This function builds a backbone model for a vision transformer. It takes arguments, creates position embedding, sets train and return flags, initializes the backbone, combines it with the position embedding, and returns the final model.",
            "location": "\"/media/root/Prima/works/act-plus-plus/docs/src/detr/models/backbone.py\":114-121",
            "content": "def build_backbone(args):\n    position_embedding = build_position_encoding(args)\n    train_backbone = args.lr_backbone > 0\n    return_interm_layers = args.masks\n    backbone = Backbone(args.backbone, train_backbone, return_interm_layers, args.dilation)\n    model = Joiner(backbone, position_embedding)\n    model.num_channels = backbone.num_channels\n    return model"
        }
    ]
}